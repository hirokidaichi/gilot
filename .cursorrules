# Gilot Project Development Rules

## プロジェクト概要
- Gitログの視覚的分析ツール
- Python 3.8以上が必要
- Poetry を使用した依存関係管理

## 開発環境セットアップ
```bash
poetry install  # 依存関係のインストール
poetry shell    # 仮想環境の有効化
```

## コードスタイル
- flake8とautopep8に従うこと
- mypyによる型チェックを必須とする
- テストカバレッジの維持を重視（pytest-cov使用）

## プロジェクト構造
主要コンポーネント：
- core.py: コアロジック
- plotter.py: 可視化機能
- app.py: メインアプリケーション
- hotgraph.py: ホットスポット分析
- filetracker.py: ファイル追跡機能

## テスト
- すべての新機能にはテストを追加すること
- `pytest`でテストを実行
- カバレッジレポートの生成: `pytest --cov=gilot`

## 型ヒント
- すべての新しいコードには型ヒントを付けること
- `mypy`による静的型チェックを実施

## コミットルール
- 機能追加は`feature/`ブランチで開発
- コミットメッセージは具体的で明確に
- リファクタリングは独立したコミットとして管理

## CI/CD
- テスト、リント、型チェックをプッシュ前に実行
- カバレッジレポートの確認

## 注意点
- データ処理時のメモリ使用量に注意
- 大規模リポジトリ解析時のパフォーマンス考慮
- 可視化関連の依存関係（matplotlib, seaborn）のバージョン互換性に注意

## ドキュメント
- コードには適切なドキュメンテーションを含めること
- README.mdは最新の状態を維持
- 重要な変更は必ずドキュメントに反映 